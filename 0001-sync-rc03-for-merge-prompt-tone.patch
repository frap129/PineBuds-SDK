From 4d4eb39efa65322f179f156d4301307791560ad7 Mon Sep 17 00:00:00 2001
From: jietengxie <jietengxie@bestechnic.com>
Date: Sat, 15 Aug 2020 15:51:36 +0800
Subject: [PATCH 1/3] sync rc03 for merge prompt tone

---
 apps/main/apps.cpp                   |  3 ++-
 services/bt_app/app_bt_stream.cpp    |  5 ++++-
 services/bt_app/app_hfp.cpp          | 20 ++++++++++++++++++--
 services/bt_app/audio_prompt_sbc.cpp |  5 ++---
 4 files changed, 26 insertions(+), 7 deletions(-)

diff --git a/apps/main/apps.cpp b/apps/main/apps.cpp
index fc7a0d1899..4d9405362c 100644
--- a/apps/main/apps.cpp
+++ b/apps/main/apps.cpp
@@ -702,7 +702,8 @@ static osTimerId app_postponed_reset_timer = NULL;
 #define APP_RESET_PONTPONED_TIME_IN_MS  2000
 static void app_postponed_reset_timer_handler(void const *param)
 {
-    hal_cmu_sys_reboot();
+//    hal_cmu_sys_reboot();
+	app_reset();
 }
 
 void app_start_postponed_reset(void)
diff --git a/services/bt_app/app_bt_stream.cpp b/services/bt_app/app_bt_stream.cpp
index 3285fb8da9..f4bdb36d1f 100644
--- a/services/bt_app/app_bt_stream.cpp
+++ b/services/bt_app/app_bt_stream.cpp
@@ -3417,8 +3417,11 @@ int bt_sbc_player(enum PLAYER_OPER_T on, enum APP_SYSFREQ_FREQ_T freq)
 #if USER_REBOOT_PLAY_MUSIC_AUTO
         TRACE(0,"hal_sw_bootmode_set HAL_SW_BOOTMODE_LOCAL_PLAYER!!!!!!");
         hal_sw_bootmode_set(HAL_SW_BOOTMODE_LOCAL_PLAYER);
-#endif
 
+#endif
+#ifdef MIX_AUDIO_PROMPT_WITH_A2DP_MEDIA_ENABLED
+        audio_prompt_stop_playing();
+#endif
 #if defined(IBRT)
         app_ibrt_if_exec_sleep_hook_blocker_set(APP_IBRT_IF_SLEEP_HOOK_BLOCKER_A2DP_STREAMING);
 #endif
diff --git a/services/bt_app/app_hfp.cpp b/services/bt_app/app_hfp.cpp
index fa56c936d3..c1c4f8bddb 100644
--- a/services/bt_app/app_hfp.cpp
+++ b/services/bt_app/app_hfp.cpp
@@ -462,7 +462,6 @@ int app_hfp_siri_voice(bool en)
 static enum BT_DEVICE_ID_T hfp_cur_call_chnl = BT_DEVICE_NUM;
 static int8_t cur_chnl_call_on_active[BT_DEVICE_NUM] = {0};
 int app_bt_get_audio_up_id(void);
-uint8_t btapp_hfp_get_call_state(void);
 
 void app_hfp_3_way_call_counter_set(enum BT_DEVICE_ID_T id,uint8_t set)
 {
@@ -936,7 +935,9 @@ static void hfp_call_ind_handler(hf_chan_handle_t chan, struct hfp_context *ctx)
                     }
                     else
                     {
+#ifndef ENABLE_HFP_AUDIO_PENDING_FOR_MEDIA
                         app_audio_manager_sendrequest(APP_BT_STREAM_MANAGER_SWITCHTO_SCO,BT_STREAM_VOICE,chan_id_flag.id,0);
+#endif
                     }
             }
         }
@@ -986,11 +987,13 @@ static void hfp_call_ind_handler(hf_chan_handle_t chan, struct hfp_context *ctx)
             if(app_bt_device.hf_audio_state[anotherDevice] == BTIF_HF_AUDIO_CON){
                 app_bt_device.curr_hf_channel_id = chan_id_flag.id;
 #ifdef __HF_KEEP_ONE_ALIVE__
+#ifdef ENABLE_HFP_AUDIO_PENDING_FOR_MEDIA
                 if (bt_media_cur_is_bt_stream_media())
                 {
                     app_hfp_set_starting_media_pending_flag(true, chan_id_flag.id);
                 }
                 else
+#endif
                 {
                     app_hfp_start_voice_media(chan_id_flag.id);
                 }
@@ -1274,11 +1277,13 @@ static void hfp_audio_connected_handler(hf_chan_handle_t chan, struct hfp_contex
 #ifdef _THREE_WAY_ONE_CALL_COUNT__
         app_hfp_set_cur_chnl_id(chan_id_flag.id);
 #endif
+#ifdef ENABLE_HFP_AUDIO_PENDING_FOR_MEDIA
         if (bt_media_cur_is_bt_stream_media())
         {
             app_hfp_set_starting_media_pending_flag(true, BT_DEVICE_ID_1);
         }
         else
+#endif
         {
             app_hfp_start_voice_media(BT_DEVICE_ID_1);
         }
@@ -1525,6 +1530,7 @@ static void app_hfp_set_starting_media_pending_flag(bool isEnabled, uint8_t devI
      app_hfp_is_starting_media_pending_flag = isEnabled;
 
      app_hfp_pending_dev_id = devId;
+#if 0
     if (isEnabled)
     {
         if (!app_hfp_mediaplay_delay_resume_timer_id ) {
@@ -1535,6 +1541,7 @@ static void app_hfp_set_starting_media_pending_flag(bool isEnabled, uint8_t devI
         osTimerStart(app_hfp_mediaplay_delay_resume_timer_id ,
             HFP_MEDIAPLAY_DELAY_RESUME_IN_MS);
     }
+#endif
 }
 
 void app_hfp_start_voice_media(uint8_t devId)
@@ -2081,7 +2088,16 @@ int hfp_ibrt_sco_audio_connected(hfp_sco_codec_t codec, uint16_t sco_connhdl)
     app_bt_device.hf_audio_state[BT_DEVICE_ID_1] = BTIF_HF_AUDIO_CON;
     btif_hf_set_negotiated_codec(app_bt_device.hf_channel[BT_DEVICE_ID_1] ,codec);
     app_audio_manager_set_scocodecid(BT_DEVICE_ID_1,codec);
-    app_audio_manager_sendrequest(APP_BT_STREAM_MANAGER_START,BT_STREAM_VOICE,BT_DEVICE_ID_1,0);
+#ifdef ENABLE_HFP_AUDIO_PENDING_FOR_MEDIA
+    if (bt_media_cur_is_bt_stream_media())
+    {
+        app_hfp_set_starting_media_pending_flag(true, BT_DEVICE_ID_1);
+    }
+    else
+#endif
+    {
+        app_hfp_start_voice_media(BT_DEVICE_ID_1);
+    }
     app_ibrt_if_sniff_checker_start(APP_IBRT_IF_SNIFF_CHECKER_USER_HFP);
     btdrv_switch_agc_mode(BT_WORK_MODE);
     bt_drv_reg_op_hwagc_mode_set(ACTIVE_SYNC_MODE);
diff --git a/services/bt_app/audio_prompt_sbc.cpp b/services/bt_app/audio_prompt_sbc.cpp
index 21de0762cc..4dd7abee88 100644
--- a/services/bt_app/audio_prompt_sbc.cpp
+++ b/services/bt_app/audio_prompt_sbc.cpp
@@ -934,7 +934,7 @@ static void audio_prompt_processing_handler_func(uint32_t acquiredPcmDataLen, ui
         if (audio_prompt_env.leftEncodedDataLen == 0) {
             if (LengthOfCQueue(&(audio_prompt_env.pcmDataQueue)) < audio_prompt_env.mergeOutOverlapLength / audio_prompt_env.targetChannelCnt * (int32_t)sizeof(uint16_t)) {
                 TRACE(2, "[%s] merge end, remain %d", __FUNCTION__, audio_prompt_env.mergeOutOverlapLength);
-                merge_out_start = src_len - (audio_prompt_env.mergeOutOverlapLength - LengthOfCQueue(&(audio_prompt_env.pcmDataQueue)));
+                merge_out_start = src_len - (audio_prompt_env.mergeOutOverlapLength - LengthOfCQueue(&(audio_prompt_env.pcmDataQueue)) / sizeof(uint16_t) * audio_prompt_env.targetChannelCnt);
             }
         }
 
@@ -962,8 +962,7 @@ static void audio_prompt_processing_handler_func(uint32_t acquiredPcmDataLen, ui
     }
 
 exit:
-    if (audio_prompt_env.isAudioPromptDecodingDone ||
-        (0 == audio_prompt_env.leftEncodedDataLen))
+    if (audio_prompt_env.mergeOutOverlapLength == 0)
     {
         // prompt playing is completed
         audio_prompt_stop_playing();
-- 
2.11.0.windows.1

